package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

	private static final long serialVersionUID = 1L;
	private JoinPredicate p;
	private OpIterator child1;
	private OpIterator child2;
	private Tuple child1_next;
	private TupleDesc td;

	/**
	 * Constructor. Accepts two children to join and the predicate to join them on
	 * 
	 * @param p      The predicate to use to join the children
	 * @param child1 Iterator for the left(outer) relation to join
	 * @param child2 Iterator for the right(inner) relation to join
	 * @throws TransactionAbortedException
	 * @throws DbException
	 * @throws NoSuchElementException
	 */
	public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
		// some code goes here
		this.p = p;
		this.child1 = child1;
		this.child2 = child2;
		td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
		child1_next = null;
	}

	public JoinPredicate getJoinPredicate() {
		// some code goes here
		return p;
	}

	/**
	 * @return the field name of join field1. Should be quantified by alias or table
	 *         name.
	 */
	public String getJoinField1Name() {
		// some code goes here
		return child1.getTupleDesc().getFieldName(p.getField1());
	}

	/**
	 * @return the field name of join field2. Should be quantified by alias or table
	 *         name.
	 */
	public String getJoinField2Name() {
		// some code goes here
		return child2.getTupleDesc().getFieldName(p.getField2());
	}

	/**
	 * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
	 *      implementation logic.
	 */
	public TupleDesc getTupleDesc() {
		// some code goes here
		return td;
	}

	public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
		// some code goes here
		child1.open();
		child2.open();
		super.open();
	}

	public void close() {
		// some code goes here
		super.close();
		child1.close();
		child2.close();
	}

	public void rewind() throws DbException, TransactionAbortedException {
		// some code goes here
		child1.rewind();
		child2.rewind();
		if (child1.hasNext())
			child1_next = child1.next();
		else
			child1_next = null;

	}

	/**
	 * Returns the next tuple generated by the join, or null if there are no more
	 * tuples. Logically, this is the next tuple in r1 cross r2 that satisfies the
	 * join predicate. There are many possible implementations; the simplest is a
	 * nested loops join.
	 * <p>
	 * Note that the tuples returned from this particular implementation of Join are
	 * simply the concatenation of joining tuples from the left and right relation.
	 * Therefore, if an equality predicate is used there will be two copies of the
	 * join attribute in the results. (Removing such duplicate columns can be done
	 * with an additional projection operator if needed.)
	 * <p>
	 * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined
	 * on equality of the first column, then this returns {1,2,3,1,5,6}.
	 * 
	 * @return The next matching tuple.
	 * @see JoinPredicate#filter
	 */
	protected Tuple fetchNext() throws TransactionAbortedException, DbException {
		// some code goes here
		//System.out.println(p.getOperator());
		Tuple t2;
//		System.out.println(child1_next);
//		while(child1.hasNext()) {
//			System.out.println("has next");
//			System.out.println(child1.next());
//		}
//		System.out.println("======================");
//		child1.rewind();
//		while(child2.hasNext()) {
//			System.out.println(child2.next());
//		}
//		System.out.println("======================");
//		child2.rewind();
		
			//open();
		if (child1_next == null) {
			if (child1.hasNext())
				child1_next = child1.next();
			else
				return null;
		}
		
	
		if(!child2.hasNext()) {
			//child1_next = child1.next();
			if(child1.hasNext()) {
				//child2.rewind();
				child1_next = child1.next();
				child2.rewind();
			} else {
				//return null;
			}
		}
		while (child2.hasNext()) {
			t2 = child2.next();
			if (p.filter(child1_next, t2)) {
				Tuple newTuple = new Tuple(td);
				Iterator<Field> t1_it = child1_next.fields();
				Iterator<Field> t2_it = t2.fields();
				for (int i = 0; i < newTuple.numOfFields(); i++) {
					if (t1_it.hasNext()) {
						newTuple.values[i] = t1_it.next();
					} else if (t2_it.hasNext()) {
						newTuple.values[i] = t2_it.next();
					}
				}
				return newTuple;
			}else if(child2.hasNext()) {
				//System.out.println("we need to continue child2");
				continue;
			} else if( child1.hasNext()) {
				child1_next = child1.next();
				child2.rewind();
			} else if(!child1.hasNext()) {
				return null;
			}
		}
		
		return null;
	}

	@Override
	public OpIterator[] getChildren() {
		// some code goes here
		return new OpIterator[] { child1, child2 };
	}

	@Override
	public void setChildren(OpIterator[] children) {
		// some code goes here
		child1 = children[0];
		child2 = children[1];
	}

}
